{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Error.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasErrors","error","errorInfo","this","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAmBeA,EAhBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAGxB,OAEI,sBAAKC,UAAU,kDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,mCAAMF,EAAN,OACA,kCAAKC,YCaNK,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAGhB,OACI,8BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEID,KAAMA,EACNP,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAJZS,SCKlBC,EAfG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OAEI,8BACI,uBACIV,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCGXI,EAXA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,QAASC,OAAQ,SAA1D,SACKJ,EAAMK,YCoBJC,E,kDAtBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,WAAW,GAHA,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,WAAW,M,+BAI3B,OAAIG,KAAKJ,MAAMC,UACJ,4DAEJG,KAAKX,MAAMK,a,GAhBEQ,aC6DbC,G,wDAtDX,aAAe,IAAD,8BACV,gBAoBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,QAEzCC,QAAQC,IAAIJ,EAAMC,OAAOC,QAnBzB,EAAKX,MAAQ,CACTlB,OAAQ,GACRK,YAAa,IAPP,E,gEAWO,IAAD,OAChB2B,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAEvB,OAAQoC,S,+BAcrC,IAAD,EACyBd,KAAKJ,MAA5BlB,EADF,EACEA,OAAQK,EADV,EACUA,YACTgC,EAAiBrC,EAAOsC,QAAO,SAAAC,GACjC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASpC,EAAYmC,kBAEzD,OAAsB,IAAlBxC,EAAO0C,OACA,2CAGH,sBAAK9C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAACiB,EAAD,UACI,cAAC,EAAD,CAAU3C,OAASqC,e,GA3C7Bb,cCIHoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACL,cAAC,EAAD,IAEEC,SAASC,eAAe,SAK9BX,M","file":"static/js/main.75d7aa94.chunk.js","sourcesContent":["import React from 'react';\n\n//These are coming from the properties we created in the index.js script. under the card components\nconst Card = ({name, email, id}) => {\n\n\n    return (\n\n        <div className=\"tc bg-light-green dib br3 ma2 grow bw2 shadow-5\">\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2> {name} </h2>\n                <p> {email}</p>\n            </div>\n        </div>\n    );\n}\n\n\nexport default Card;","import React from 'react'\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n\n\n    return (\n        <div >\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            user={user}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n\n        <div>\n            <input\n                className=\"pa3 ba b--green bg-lightest-blue\"\n                type='search'\n                placeholder='Search robots'\n                onChange={searchChange}\n            />\n        </div>\n\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: ' none', height: '650px'}}>\n            {props.children}\n        </div>\n    );\n\n};\n\n\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasErrors: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasErrors: true });\n    }\n\n    render() {\n        if (this.state.hasErrors) {\n            return <h1> Oooooop. That is not good</h1>\n        }\n        return this.props.children;\n\n    }\n\n\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport Error from \"../components/Error\";\nimport './App.css'\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        //This state is what defines our app\n        //They usually le=ive in the parent component\n        //Components that have state are called smart components\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ robots: users }));\n\n    }\n\n\n    //Life cycle methods react\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value})\n        //This gives us the value of the search change\n        console.log(event.target.value);\n\n    }\n\n    render() {\n        const {robots, searchField} = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        if (robots.length === 0) {\n            return <h1> Loading </h1>\n        } else {\n            return (\n                <div className=\"tc\">\n                    <h1 className=\"f1\"> Robofriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <Error>\n                            <CardList robots={ filteredRobots } />\n                        </Error>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\n\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n    <App />\n\n    , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}